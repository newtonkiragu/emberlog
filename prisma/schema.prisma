// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  name             String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Entry            Entry[]
  sessions         Session[]
  DailyMoodSummary DailyMoodSummary[]
}

model Entry {
  id         String   @id @default(uuid())
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  tags       Tag[]    @relation("EntryTags")
  tagIds     String[]
  mood       Mood     @default(NEUTRAL)
  moodScore  Float?   @default(0)
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  score     Float?   @default(0) // Optional field
  entries   Entry[]  @relation("EntryTags")
  entriesId String[]
  createdAt DateTime @default(now())
}

enum Mood {
  TERRIBLE
  BAD
  SAD
  MEH
  NEUTRAL
  OKAY
  GOOD
  GREAT
  HAPPY
}

model DailyMoodSummary {
  id        String   @id @default(uuid())
  date      DateTime @unique
  mood      Mood
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
